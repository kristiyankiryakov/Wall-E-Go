services:

# Api-Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway:/app
    environment:
      - AUTH_HOST=auth:50051
      - WALLET_HOST=wallet:50052
      - TRANSACTION_HOST=transaction:50053
      - JWT_KEY=MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAwczAzq0G4TRw8Qj69FRxnuV380IQ #should be hidden in prod!!!
    networks:
      - myapp-network

# Authentication Service
  auth:
    depends_on:
      - auth-db
    build:
      context: ./auth-service
      dockerfile: ./Dockerfile.dev
    ports:
      - "50051:50051"
    volumes:
      - ./auth-service:/app
    environment:
      JWT_KEY: MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAwczAzq0G4TRw8Qj69FRxnuV380IQ #should be hidden in prod!!!
      DSN: "host=auth-db port=5432 user=user password=password dbname=auth_service sslmode=disable timezone=UTC connect_timeout=5"
      AUTH_PORT: "50051"
    networks:
      - myapp-network

  auth-db:
    image: 'postgres:14.2'
    ports:
      - "5433:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth_service
    volumes:
      - auth-db-data:/var/lib/postgresql/data/
      - ./auth-service/migrations:/migrations
    networks:
      - myapp-network
  
  # Wallet Service
  wallet:
    depends_on:
      - wallet-db
      - kafka
    build:
      context: ./wallet-service
      dockerfile: ./Dockerfile.dev
    volumes:
      - ./wallet-service:/app
    ports:
      - "50052:50052"
    environment:
      DSN: "host=wallet-db port=5432 user=user password=password dbname=wallet_db sslmode=disable timezone=UTC connect_timeout=5"
      WALLET_PORT: "50052"
    networks:
      - myapp-network

# Wallet Database 
  wallet-db:
    image: 'postgres:14.2'
    ports:
      - "5434:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: wallet_db
    volumes:
      - wallet-db-data:/var/lib/postgresql/data/
      - ./wallet-service/migrations:/migrations
    networks:
      - myapp-network

  # Transaction Service
  transaction:
    depends_on:
      kafka:
        condition: service_healthy
    build:
      context: ./transaction-service
      dockerfile: ./Dockerfile.dev
    volumes:
      - ./transaction-service:/app
    ports:
      - "50053:50053"
    environment:
      DSN: "host=transaction-db port=5432 user=user password=password dbname=transaction_db sslmode=disable timezone=UTC connect_timeout=5"
      TRANSACTION_PORT: "50053"
    networks:
      - myapp-network

# Transaction Database 
  transaction-db:
    image: 'postgres:14.2'
    ports:
      - "5435:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: transaction_db
    volumes:
      - transaction-db-data:/var/lib/postgresql/data/
      - ./transaction-service/migrations:/migrations
    networks:
      - myapp-network
      
# ZooKeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - myapp-network

# Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s    
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_RETENTION_MS: 86400000
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
    networks:
      - myapp-network

volumes:
  auth-db-data:
  wallet-db-data:
  transaction-db-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:

networks:
  myapp-network:
    driver: bridge